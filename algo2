ALGORITHM Insertion_Sort
VAR
   n: INTEGER;
   Tab: ARRAY_OF INTEGER[100];
   i, j, key: INTEGER;

BEGIN
   // Get the length of the array
   Write("Give me the number of elements in the list: ");
   Read(n);

   // Get the elements of the array one by one
   Write("Give me the elements of the list:");
   FOR i FROM 0 TO n-1 STEP 1 DO
       Read(Tab[i]);
   END_FOR

   // Insertion Sort Algorithm
   FOR i FROM 1 TO n-1 STEP 1 DO
       key := Tab[i];
       j := i - 1;

       WHILE (j >= 0 AND Tab[j] > key) DO
           Tab[j + 1] := Tab[j];
           j := j - 1;
       END_WHILE

       Tab[j + 1] := key;
   END_FOR

   // Output the sorted elements
   Write("The sorted elements of the list are:");
   FOR i FROM 0 TO n-1 STEP 1 DO
       Write(Tab[i]);
   END_FOR
END
**********************************************************************************
Hereâ€™s a concise **README** for the `Insertion_Sort` algorithm:

---

# Insertion_Sort Algorithm

## Purpose
The `Insertion_Sort` algorithm sorts a list of integers in ascending order.

## Input & Output
- **Input**: 
  - `n`: The number of elements in the list.
  - `Tab`: An array of `n` integers provided by the user.
- **Output**: The sorted list of integers.

## Steps
1. **Input Array**:
   - Prompt the user for the number of elements (`n`).
   - Read each element of the list into the array `Tab`.
   
2. **Sorting**:
   - For each element from the second to the last (`i = 1` to `n - 1`):
     - Set `key` to the current element (`Tab[i]`).
     - Compare `key` with elements before it, shifting elements greater than `key` to the right.
     - Insert `key` at the correct position in the sorted part of the array.

3. **Output Sorted Array**:
   - Display the sorted list of integers.

## Example
For an input list `[5, 2, 9, 1, 5, 6]`, the output would be `[1, 2, 5, 5, 6, 9]`.

---

This README outlines the algorithm's purpose, inputs, outputs, and process in a concise manner.





